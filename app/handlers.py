from aiogram import Router, F
import asyncio
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from app.database.models import db
import app.keyboards as kb
from app.state import Reg
from aiogram.types import ReplyKeyboardRemove

handlers = Router()

@handlers.message(CommandStart())
async def cmd_start(message: Message):
    tg_id = message.from_user.id
    user_row = await db.pool.fetchrow('''SELECT id FROM students WHERE tg_id = $1''', tg_id)

    if user_row:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã \n", reply_markup=kb.kb_main_menu)
        return

    else:
        user_name = message.from_user.full_name
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {user_name}!\n"
                             f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã –ò–°–¢–∑-22.\n"
                             f" –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç:\n"
                             f"- –ù–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n"
                             f"- –ù–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤\n"
                             f"- –£–∑–Ω–∞—Ç—å –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n"
                             f"- –ù–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∏ –∑–∞—á–µ—Ç–æ–≤\n"
                             f"- –ù–∞–π—Ç–∏ —É—á–µ–±–Ω—ã–µ –∏ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
                             f"- –ù–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n"
                             f"- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–æ–∫–∏ —Å–¥–∞—á–∏ –∫—É—Ä—Å–æ–≤—ã—Ö –∏ –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç\n"
                             f"- –£–∑–Ω–∞—Ç—å —Å—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏\n\n"
                             f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                             reply_markup=kb.reg_kb)


@handlers.callback_query(F.data == 'reg')
async def reg(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è")
    await state.set_state(Reg.name)


@handlers.message(Reg.name)
async def reg_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.phone)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏–∑ Telegram –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=kb.share_phone_kb)


@handlers.message(Reg.phone, F.text)
async def reg_phone_text(message: Message, state: FSMContext):
    phone = message.text.strip()

    if not phone.startswith('+') or not phone[1:].isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567)")
        return
    await state.update_data(phone=phone)

    await message.answer(
        f"–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä: {phone}\n\n"
        f"–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π?",
        reply_markup=kb.confirm_phone_kb)


@handlers.message(Reg.phone, F.contact)
async def reg_phone_contact(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await message.answer(
        f"–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä: {phone}\n\n"
        f"–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π?",
        reply_markup=kb.confirm_phone_kb)


@handlers.callback_query(F.data == "phone_confirm")
async def phone_confirm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    phone = data.get("phone")

    await db.pool.fetchrow('''
    INSERT INTO students (tg_id, name, phone)
    VALUES ($1, $2, $3) 
    ON CONFLICT (tg_id) DO NOTHING''',
    callback.from_user.id,
    data["name"],
    phone)

    await callback.message.answer(
        f"‚úÖ –ù–æ–º–µ—Ä {phone} —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n"
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n",
        reply_markup=kb.kb_main_menu)
    await state.clear()


@handlers.callback_query(F.data == "phone_change")
async def phone_change(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardRemove())
    await state.set_state(Reg.phone)


@handlers.message(Command('main_menu'))
async def cmd_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.kb_main_menu)



@handlers.callback_query(F.data == 'main_menu')
async def cmd_main_menu(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=kb.kb_main_menu)


@handlers.callback_query(F.data == 'useful_links')
async def cmd_useful_links(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å —Å—Å—ã–ª–∫—É:", reply_markup=kb.kb_urls)

@handlers.callback_query(F.data == 'duration_session')
async def duration_session(callback: CallbackQuery):
    rows = await db.pool.fetch('''
    SELECT name, start_date, end_date FROM session_periods ORDER BY start_date DESC''')

    if not rows:
        await callback.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=kb.back_stud_menu)
        return
    text = "üìÖ –î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:\n\n"
    for row in rows:
        name = row['name']
        start_date = row[1]
        end_date = row[2]

        text += f"üîπ {name}: {start_date} ‚Äî {end_date}\n"
    await callback.message.edit_text(text, reply_markup=kb.back_stud_menu)


@handlers.callback_query(F.data == 'deadlines_info')
async def deadlines_info(callback: CallbackQuery):
    rows = await db.pool.fetch('''
    SELECT subject_name, deadline_date, description FROM deadlines ORDER BY subject_name DESC''')
    if not rows:
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ä–æ–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=kb.back_stud_menu)
        return
    text = "–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Å—Ä–æ–∫–∏ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
    for row in rows:
        name = row['subject_name']
        deadline_date = row['deadline_date']
        description = row['description']

        text += (f"üîπ {name}\n"
                 f"ü™¶ {deadline_date if deadline_date else '‚Äî'}\n"
                 f"üìã {description}\n\n")
    await callback.message.edit_text(text, reply_markup=kb.back_stud_menu)


# –†–ê–°–ü–ò–°–ê–ù–ò–ï –ó–í–û–ù–ö–û–í
@handlers.callback_query(F.data == 'call_schedule')
async def call_schedule(callback: CallbackQuery):
    await callback.message.edit_text("‚è∞ 1 –ø–∞—Ä–∞: 8.30 -- 10.05\n"
                                     "‚è∞ 2 –ø–∞—Ä–∞: 10.15 -- 11.50\n"
                                     "‚è∞ 3 –ø–∞—Ä–∞: 12.35 -- 14.10\n"
                                     "‚è∞ 4 –ø–∞—Ä–∞: 14.20 -- 15.55\n"
                                     "‚è∞ 5 –ø–∞—Ä–∞: 16.05 -- 17.40\n"
                                     "‚è∞ 6 –ø–∞—Ä–∞: 17.50 -- 19.25\n"
                                     "‚è∞ 7 –ø–∞—Ä–∞: 19.35 -- 21.10\n"
                                     "‚òï –ë–û–õ–¨–®–û–ô –ü–ï–†–ï–†–´–í: 11.50 -- 12.35", reply_markup=kb.back_stud_menu)


@handlers.callback_query(F.data == 'exam schedule')
async def exam_schedule(callback: CallbackQuery):
    rows = await db.pool.fetch('''
    SELECT certification, subject_name, exam_date, teacher_name FROM exams_schedule ORDER BY subject_name DESC''')
    if not rows:
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ä–æ–∫–∞–º —Å–¥–∞—á–∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∏ –∑–∞—á–µ—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=kb.back_stud_menu)
        return

    text = f"–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π: \n\n"
    for row in rows:
        certification = row['certification']
        name = row['subject_name']
        date = row['exam_date']
        t_name = row['teacher_name']

        text += (f"‚ùó {certification} -- üìÖ {date}\n"
                 f"üîπ {name}\n" 
                 f"üë®‚Äçüè´ {t_name}\n\n")
    await callback.message.edit_text(text, reply_markup=kb.back_stud_menu)


@handlers.callback_query(F.data == 'teacher')
async def choose_subject(callback: CallbackQuery):
    rows = await db.pool.fetch("SELECT DISTINCT subject_name FROM teacher ORDER BY subject_name ASC")

    if not rows:
        await callback.message.answer("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö.", reply_markup=kb.back_stud_menu)
        return

    kb_teacher = InlineKeyboardBuilder()
    for row in rows:
        kb_teacher.button(text=row["subject_name"], callback_data=f"subject_{row['subject_name']}")
        kb_teacher.adjust(2)

    await callback.message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=kb_teacher.as_markup())

@handlers.callback_query(F.data.startswith("subject_"))
async def show_teacher(callback: CallbackQuery):
    subject = callback.data.replace("subject_", "")

    rows = await db.pool.fetch(
        "SELECT teacher_name FROM teacher WHERE subject_name = $1",
        subject
        )

    if not rows:
        await callback.message.edit_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {subject}",reply_markup=kb.back_stud_menu)
        return

    text = f"üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É *{subject}:*\n\n"
    for row in rows:
        text += f" {row['teacher_name']}"
    await callback.message.edit_text(text,reply_markup=kb.back_stud_menu, parse_mode="Markdown")


@handlers.callback_query(F.data == 'lesson_schedule')
async def lesson_schedule(callback: CallbackQuery):
    rows = await db.pool.fetch('''
    SELECT DISTINCT day_of_week FROM schedule ORDER BY day_of_week ASC''')

    if not rows:
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=kb.back_stud_menu)
        return

    kb_schedule = InlineKeyboardBuilder()
    for row in rows:
        kb_schedule.button(text=row['day_of_week'], callback_data=f"day_{row['day_of_week']}")
        kb_schedule.adjust(2)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=kb_schedule.as_markup())


@handlers.callback_query(F.data.startswith("day_"))
async def show_schedule(callback: CallbackQuery):
    day = callback.data.replace('day_', '')

    rows = await db.pool.fetch(
        '''SELECT num_subject, subject_name, room_number FROM schedule WHERE day_of_week = $1''', day)

    if not rows:
        await callback.message.edit_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–∞ {day}", reply_markup=kb.back_stud_menu)
        return

    text = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ *{day}:*\n\n"
    for row in rows:
        text += f"{row['num_subject']}. {row['subject_name']} - {row['room_number']} –∞—É–¥–∏—Ç–æ—Ä–∏—è\n\n"
        await callback.message.edit_text(text, reply_markup=kb.back_stud_menu, parse_mode="Markdown")





