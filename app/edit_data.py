from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import os
import app.keyboards as kb
from aiogram.utils.keyboard import InlineKeyboardBuilder


from app.state import EditDateSession, EditDeadline, EditCertification, EditTeacher, EditSchedule
from app.database.models import db

load_dotenv()
edit_data = Router()

ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
HEADMAN_ID = int(os.getenv("HEADMAN_ID", 0))

admin_ids = [ADMIN_ID, HEADMAN_ID]

async def is_admin(user_id: int) -> bool:
    return user_id in admin_ids

@edit_data.message(Command('edit_data'))
async def admin_panel(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", reply_markup=kb.kb_main_menu)
        return
    await message.answer("–ü–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.kb_edit_data)


@edit_data.callback_query(F.data == 'edit_data')
async def admin_panel(callback: CallbackQuery):
    await callback.message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.kb_edit_data)


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• –û –°–†–û–ö–ê–• –°–ï–°–°–ò–ò
@edit_data.callback_query(F.data == 'edit_date_session')
async def edit_name_session(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º–µ—Å—Ç—Ä–∞:")
    await state.set_state(EditDateSession.edit_name)

@edit_data.message(EditDateSession.edit_name)
async def save_name_session(message: Message, state: FSMContext):
    await state.update_data(name_session=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞:")
    await state.set_state(EditDateSession.edit_start_date)

@edit_data.message(EditDateSession.edit_start_date)
async def save_start_date(message: Message, state: FSMContext):
    await state.update_data(start_date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:")
    await state.set_state(EditDateSession.edit_end_date)

@edit_data.message(EditDateSession.edit_end_date)
async def save_end_date(message: Message, state: FSMContext):
    await state.update_data(end_date=message.text)

    data = await state.get_data()

    await db.pool.execute('''
    UPDATE session_periods SET name = $1, start_date = $2, end_date = $3
    ''', data['name_session'], data['start_date'], data['end_date'])

    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Å—Ä–æ–∫–∞—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–∑–º–µ–Ω–µ–Ω—ã", reply_markup=kb.back_edit_data)
    await state.clear()


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• –ü–û –î–≠–î–õ–ê–ô–ù–ê–ú
@edit_data.callback_query(F.data == 'view_deadlines')
async def view_deadlines(callback: CallbackQuery):
    rows = await db.pool.fetch("SELECT id, subject_name, deadline_date FROM deadlines ORDER BY id ASC")

    if not rows:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö.", reply_markup=kb.back_edit_data)
        return

    kb_view_deadlines = InlineKeyboardBuilder()
    for row in rows:
        text = f"{row['subject_name']} ‚Äî {row['deadline_date']}"
        kb_view_deadlines.button(text=text, callback_data=f"edit_deadline_{row['id']}")

    kb_view_deadlines.adjust(1)
    await callback.message.answer("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", reply_markup=kb_view_deadlines.as_markup())


@edit_data.callback_query(F.data.startswith('edit_deadline_'))
async def edit_deadline(callback: CallbackQuery, state: FSMContext):
    deadline_id = int(callback.data.split('_')[-1])
    await state.update_data(deadline_id=deadline_id)

    kb = InlineKeyboardBuilder()
    kb.button(text="üìò –ó–∞–¥–∞—á–∞", callback_data="edit_field_subject")
    kb.button(text="üìÖ –°—Ä–æ–∫", callback_data="edit_field_date")
    kb.button(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_deadlines")
    kb.adjust(1)

    await callback.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=kb.as_markup()
    )


@edit_data.callback_query(F.data.startswith("edit_field_"))
async def choose_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[-1]
    await state.update_data(edit_field=field)

    field_names = {
        "subject": "–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞",
        "date": "–Ω–æ–≤—ã–π —Å—Ä–æ–∫ —Å–¥–∞—á–∏",
        "description": "–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
    }

    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ {field_names[field]}:")
    await state.set_state(EditDeadline.waiting_for_edit_value)


@edit_data.message(EditDeadline.waiting_for_edit_value)
async def save_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    deadline_id = data["deadline_id"]
    field = data["edit_field"]
    new_value = message.text

    column_map = {
        "subject": "subject_name",
        "date": "deadline_date",
        "description": "description"
    }
    column_name = column_map[field]

    await db.pool.execute(f'''
        UPDATE deadlines
        SET {column_name} = $1
        WHERE id = $2
    ''', new_value, deadline_id)

    await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb.kb_edit_data)
    await state.clear()

# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê –ü–†–û–í–ï–î–ï–ù–ò–Ø –ó–ê–ß–ï–¢–û–í –ò –≠–ö–ó–ê–ú–ï–ù–û–í
@edit_data.callback_query(F.data == 'view_certification')
async def view_certification(callback: CallbackQuery):
    rows = await db.pool.fetch('''
    SELECT id, certification, subject_name, exam_date, teacher_name 
    FROM exams_schedule 
    ORDER BY id ASC
    ''')
    if not rows:
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=kb.kb_edit_data)
        return

    kb_view_certification = InlineKeyboardBuilder()
    for row in rows:
        text = f"{row['certification']} - {row['subject_name']}"
        kb_view_certification.button(text=text, callback_data=f"edit_certification_{row['id']}")

    kb_view_certification.adjust(1)
    await callback.message.answer("üìã –°–ø–∏—Å–æ–∫ –∑–∞—á–µ—Ç–æ–≤ –∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤:", reply_markup=kb_view_certification.as_markup())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@edit_data.callback_query(F.data.startswith('edit_certification_'))
async def edit_certification(callback: CallbackQuery, state: FSMContext):
    certification_id = int(callback.data.split('_')[-1])
    await state.update_data(certification_id=certification_id)

    kb = InlineKeyboardBuilder()
    kb.button(text="–í–∏–¥ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏", callback_data='edit_f_certification')
    kb.button(text="–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏", callback_data='edit_f_exam_date')
    kb.button(text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞", callback_data='edit_f_subject_name')
    kb.button(text="–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data='edit_f_teacher_name')
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_certification")
    kb.adjust(1)

    await callback.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb.as_markup())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
@edit_data.callback_query(F.data.startswith('edit_f_'))
async def choose_edit_data(callback: CallbackQuery, state: FSMContext):
    # –ë–µ—Ä—ë–º –≤—Å—ë –ø–æ—Å–ª–µ 'edit_f_'
    field = callback.data[len('edit_f_'):]
    await state.update_data(edit_field=field)

    field_name = {
        'certification': "–í–∏–¥ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏",
        'subject_name': "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞",
        'exam_date': "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏",
        'teacher_name': "–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
    }

    if field not in field_name:
        await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ {field_name[field]}:")
    await state.set_state(EditCertification.edit_value)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ
@edit_data.message(EditCertification.edit_value)
async def save_edit_value(message: Message, state: FSMContext):
    data = await state.get_data()
    certification_id = data.get('certification_id')
    field = data.get("edit_field")
    new_value = message.text

    if not certification_id or not field:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    column_map = {
        'certification': 'certification',
        'subject_name': 'subject_name',
        'exam_date': 'exam_date',
        'teacher_name': 'teacher_name'
    }

    if field not in column_map:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return

    column_name = column_map[field]

    await db.pool.execute(f'''
        UPDATE exams_schedule
        SET {column_name} = $1
        WHERE id = $2
    ''', new_value, certification_id)

    await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb.kb_edit_data)
    await state.clear()



# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–û –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ô
@edit_data.callback_query(F.data == 'view_teacher')
async def view_teacher(callback: CallbackQuery):
    rows = await db.pool.fetch('''
    SELECT id, subject_name, teacher_name 
    FROM teacher
    ORDER BY subject_name ASC
    ''')

    if not rows:
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=kb.kb_edit_data)
        return

    kb_view_teacher = InlineKeyboardBuilder()
    for row in rows:
        text = f"{row['subject_name']} - {row['teacher_name']}"
        kb_view_teacher.button(text=text, callback_data=f"edit_teacher_{row['id']}")

    kb_view_teacher.adjust(1)
    await callback.message.answer("üìã –ü–æ –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:", reply_markup=kb_view_teacher.as_markup())

@edit_data.callback_query(F.data.startswith('edit_teacher_'))
async def edit_deadline(callback: CallbackQuery, state: FSMContext):
    teacher_id = int(callback.data.split('_')[-1])
    await state.update_data(teacher_id=teacher_id)

    kb = InlineKeyboardBuilder()
    kb.button(text="–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="edit_fio")
    kb.button(text="–£—á–µ–±–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", callback_data="edit_subject")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_teacher")
    kb.adjust(1)

    await callback.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=kb.as_markup()
    )


# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø –ó–ê–ù–Ø–¢–ò–ô
@edit_data.callback_query(F.data == 'edit_schedule')
async def edit_schedule(callback: CallbackQuery):
    rows = await db.pool.fetch("SELECT DISTINCT day_of_week FROM schedule ORDER BY day_of_week ASC")

    if not rows:
        await callback.message.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ", reply_markup=kb.kb_edit_data)
        return

    kb_days = InlineKeyboardBuilder()
    for row in rows:
        kb_days.button(text=row['day_of_week'], callback_data=f"edit_day_{row['day_of_week']}")
    kb_days.adjust(2)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb_days.as_markup())


@edit_data.callback_query(F.data.startswith("edit_day_"))
async def choose_lesson(callback: CallbackQuery):
    day = callback.data.replace("edit_day_", "")

    rows = await db.pool.fetch(
        "SELECT id, num_subject, subject_name, room_number FROM schedule WHERE day_of_week = $1 ORDER BY num_subject ASC",
        day
    )

    if not rows:
        await callback.message.answer(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {day}", reply_markup=kb.admin_menu)
        return

    kb_lessons = InlineKeyboardBuilder()
    for row in rows:
        kb_lessons.button(
            text=f"{row['num_subject']}. {row['subject_name']} ({row['room_number']})",
            callback_data=f"edit_lesson_{row['id']}"
        )
    kb_lessons.adjust(1)

    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {day}:", reply_markup=kb_lessons.as_markup())


@edit_data.callback_query(F.data.startswith("edit_lesson_"))
async def edit_lesson(callback: CallbackQuery, state: FSMContext):
    lesson_id = int(callback.data.replace("edit_lesson_", ""))

    row = await db.pool.fetchrow("SELECT * FROM schedule WHERE id = $1", lesson_id)
    await state.update_data(lesson_id=lesson_id)

    await state.update_data(day_of_week=row['day_of_week'], num_subject=row['num_subject'],
                            subject_name=row['subject_name'], room_number=row['room_number'])

    await callback.message.answer(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: {row['subject_name']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(EditSchedule.edit_schedule)


@edit_data.message(EditSchedule.edit_schedule)
async def update_subject_name(message: Message, state: FSMContext):
    await state.update_data(subject_name=message.text)

    data = await state.get_data()

    await db.pool.execute(
        "UPDATE schedule SET day_of_week=$1, num_subject=$2, subject_name=$3, room_number=$4 WHERE id=$5",
        data['day_of_week'], data['num_subject'], data['subject_name'], data['room_number'], data['lesson_id']
    )

    # await db.pool.execute(
    #     "UPDATE schedule SET subject_name=$1 WHERE id=$2",
    #     data['subject_name'], data['lesson_id']
    # )

    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=kb.edit_schedule)
    await state.clear()



